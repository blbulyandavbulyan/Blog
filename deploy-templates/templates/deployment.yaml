apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "blog.fullname" . }}
  labels:
    {{- include "blog.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "blog.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "blog.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "blog.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: SPRING_PROFILES_ACTIVE
            valueFrom:
              configMapKeyRef:
                name: {{ include "blog.fullname" . }}
                key: active_profile
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "blog.fullname" . }}
                key: db_user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "blog.fullname" . }}
                key: db_password
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ include "blog.fullname" . }}
                key: db_host
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ include "blog.fullname" . }}
                key: db_name
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ include "blog.fullname" . }}
                key: db_port
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{ if .Values.db.cloud.sql.proxy.create }}
        - name: cloud-sql-proxy
          # It is recommended to use the latest version of the Cloud SQL Auth Proxy
          # Make sure to update on a regular schedule!
          # All configuration works for version 2.11.4, I put latest version
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest
          imagePullPolicy: IfNotPresent

          args:
            - {{ .Values.db.cloudSqlProxy.instanceConnectionName | quote }}

          env:
            # Replace <DB_PORT> with the port that the proxy should open
            # to listen for database connections from the application
            - name: CSQL_PROXY_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "blog.fullname" . }}
                  key: db_port

            - name: CSQL_PROXY_PRIVATE_IP
              value: "true"

            - name: CSQL_PROXY_HEALTH_CHECK
              value: "true"
            - name: CSQL_PROXY_HTTP_PORT
              value: "9801"
            - name: CSQL_PROXY_HTTP_ADDRESS
              value: 0.0.0.0

            # Configure the proxy to exit gracefully when sent a k8s configuration
            # file.
            - name: CSQL_PROXY_EXIT_ZERO_ON_SIGTERM
              value: "true"

            # Enable the admin api server (which only listens for local connections)
            # and enable the /quitquitquit endpoint. This allows other pods
            # to shut down the proxy gracefully when they are ready to exit.
            - name: CSQL_PROXY_QUITQUITQUIT
              value: "true"
            - name: CSQL_PROXY_ADMIN_PORT
              value: "9092"

            # Enable structured logging with LogEntry format
            - name: CSQL_PROXY_STRUCTURED_LOGS
              value: "true"

          # Configure kubernetes to call the /quitquitquit endpoint on the
          # admin server before sending SIGTERM to the proxy before stopping
          # the pod. This will give the proxy more time to gracefully exit.
          lifecycle:
            preStop:
              httpGet:
                path: /quitquitquit
                port: 9092
                scheme: HTTP

          # The /startup probe returns OK when the proxy is ready to receive
          # connections from the application. In this example, k8s will check
          # once a second for 60 seconds.
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /startup
              port: 9801
              scheme: HTTP
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 10
          # The /liveness probe returns OK as soon as the proxy application has
          # begun its startup process and continues to return OK until the
          # process stops.
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 9801
              scheme: HTTP
            # The probe will be checked every 10 seconds.
            periodSeconds: 10
            # Number of times the probe is allowed to fail before the transition
            # from healthy to failure state.
            successThreshold: 1
            # The probe will fail if it does not respond in 10 seconds
            timeoutSeconds: 10
          readinessProbe:
            # The /readiness probe returns OK when the proxy can establish
            # a new connections to its databases.
            httpGet:
              path: /readiness
              port: 9801
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            # Number of times the probe must report success to transition from failure to healthy state.
            # Defaults to 1 for readiness probe.
            successThreshold: 1
            failureThreshold: 6

          # Declare the HTTP Port so that k8s components can reach the
          # metrics and health check endpoints.
          ports:
            - containerPort: 9801
              protocol: TCP
          resources:
            requests:
              memory: "2Gi"
              cpu:    "1"
          securityContext:
            runAsNonRoot: true
            # Use a read-only filesystem
            readOnlyRootFilesystem: true
            # Do not allow privilege escalation
            allowPrivilegeEscalation : false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        {{ end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
